// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

// CTRL_BUS
// 0x00 : Control signals
//        bit 0  - ap_start (Read/Write/COH)
//        bit 1  - ap_done (Read/COR)
//        bit 2  - ap_idle (Read)
//        bit 3  - ap_ready (Read)
//        bit 7  - auto_restart (Read/Write)
//        others - reserved
// 0x04 : Global Interrupt Enable Register
//        bit 0  - Global Interrupt Enable (Read/Write)
//        others - reserved
// 0x08 : IP Interrupt Enable Register (Read/Write)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x0c : IP Interrupt Status Register (Read/TOW)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x10 : Data signal of inputByteOffset
//        bit 31~0 - inputByteOffset[31:0] (Read/Write)
// 0x14 : reserved
// 0x18 : Data signal of outputByteOffset
//        bit 31~0 - outputByteOffset[31:0] (Read/Write)
// 0x1c : reserved
// 0x20 : Data signal of parametersByteOffset
//        bit 31~0 - parametersByteOffset[31:0] (Read/Write)
// 0x24 : reserved
// 0x28 : Data signal of batchSize
//        bit 31~0 - batchSize[31:0] (Read/Write)
// 0x2c : reserved
// 0x30 : Data signal of useReLu
//        bit 0  - useReLu[0] (Read/Write)
//        others - reserved
// 0x34 : reserved
// 0x38 : Data signal of type_r
//        bit 1~0 - type_r[1:0] (Read/Write)
//        others  - reserved
// 0x3c : reserved
// 0x40 : Data signal of k
//        bit 31~0 - k[31:0] (Read/Write)
// 0x44 : reserved
// 0x48 : Data signal of n
//        bit 31~0 - n[31:0] (Read/Write)
// 0x4c : reserved
// 0x50 : Data signal of m
//        bit 31~0 - m[31:0] (Read/Write)
// 0x54 : reserved
// 0x58 : Data signal of c
//        bit 31~0 - c[31:0] (Read/Write)
// 0x5c : reserved
// 0x60 : Data signal of w
//        bit 31~0 - w[31:0] (Read/Write)
// 0x64 : reserved
// 0x68 : Data signal of h
//        bit 31~0 - h[31:0] (Read/Write)
// 0x6c : reserved
// 0x70 : Data signal of stride
//        bit 31~0 - stride[31:0] (Read/Write)
// 0x74 : reserved
// 0x78 : Data signal of kernelSize
//        bit 31~0 - kernelSize[31:0] (Read/Write)
// 0x7c : reserved
// 0x80 : Data signal of pad
//        bit 31~0 - pad[31:0] (Read/Write)
// 0x84 : reserved
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

#define XACCELERATOR_CTRL_BUS_ADDR_AP_CTRL                   0x00
#define XACCELERATOR_CTRL_BUS_ADDR_GIE                       0x04
#define XACCELERATOR_CTRL_BUS_ADDR_IER                       0x08
#define XACCELERATOR_CTRL_BUS_ADDR_ISR                       0x0c
#define XACCELERATOR_CTRL_BUS_ADDR_INPUTBYTEOFFSET_DATA      0x10
#define XACCELERATOR_CTRL_BUS_BITS_INPUTBYTEOFFSET_DATA      32
#define XACCELERATOR_CTRL_BUS_ADDR_OUTPUTBYTEOFFSET_DATA     0x18
#define XACCELERATOR_CTRL_BUS_BITS_OUTPUTBYTEOFFSET_DATA     32
#define XACCELERATOR_CTRL_BUS_ADDR_PARAMETERSBYTEOFFSET_DATA 0x20
#define XACCELERATOR_CTRL_BUS_BITS_PARAMETERSBYTEOFFSET_DATA 32
#define XACCELERATOR_CTRL_BUS_ADDR_BATCHSIZE_DATA            0x28
#define XACCELERATOR_CTRL_BUS_BITS_BATCHSIZE_DATA            32
#define XACCELERATOR_CTRL_BUS_ADDR_USERELU_DATA              0x30
#define XACCELERATOR_CTRL_BUS_BITS_USERELU_DATA              1
#define XACCELERATOR_CTRL_BUS_ADDR_TYPE_R_DATA               0x38
#define XACCELERATOR_CTRL_BUS_BITS_TYPE_R_DATA               2
#define XACCELERATOR_CTRL_BUS_ADDR_K_DATA                    0x40
#define XACCELERATOR_CTRL_BUS_BITS_K_DATA                    32
#define XACCELERATOR_CTRL_BUS_ADDR_N_DATA                    0x48
#define XACCELERATOR_CTRL_BUS_BITS_N_DATA                    32
#define XACCELERATOR_CTRL_BUS_ADDR_M_DATA                    0x50
#define XACCELERATOR_CTRL_BUS_BITS_M_DATA                    32
#define XACCELERATOR_CTRL_BUS_ADDR_C_DATA                    0x58
#define XACCELERATOR_CTRL_BUS_BITS_C_DATA                    32
#define XACCELERATOR_CTRL_BUS_ADDR_W_DATA                    0x60
#define XACCELERATOR_CTRL_BUS_BITS_W_DATA                    32
#define XACCELERATOR_CTRL_BUS_ADDR_H_DATA                    0x68
#define XACCELERATOR_CTRL_BUS_BITS_H_DATA                    32
#define XACCELERATOR_CTRL_BUS_ADDR_STRIDE_DATA               0x70
#define XACCELERATOR_CTRL_BUS_BITS_STRIDE_DATA               32
#define XACCELERATOR_CTRL_BUS_ADDR_KERNELSIZE_DATA           0x78
#define XACCELERATOR_CTRL_BUS_BITS_KERNELSIZE_DATA           32
#define XACCELERATOR_CTRL_BUS_ADDR_PAD_DATA                  0x80
#define XACCELERATOR_CTRL_BUS_BITS_PAD_DATA                  32

